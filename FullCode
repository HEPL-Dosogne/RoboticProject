#include <SoftwareSerial.h>
#include <QTRSensors.h>     // Line Sensors
#include <JQ6500_Serial.h>  // MP3 module 
#include <Servo.h>          // Servo motors

// Left wheels
#define MOTORB_L 10 //MOTOR1_IN1   //brown
#define MOTORF_L 11 //MOTOR1_IN2  //orange
// Right wheels
#define MOTORB_R 5 //MOTOR2_IN1   //grey
#define MOTORF_R 6 //MOTOR2_IN2   //blue
// Obstacles sensors
#define TRIG_PIN1 23
#define ECHO_PIN1 25
#define TRIG_PIN2 31
#define ECHO_PIN2 33

// Servo moteurs
Servo BrasMain;
Servo BrasSup;

// Line sensors
QTRSensors qtr;

// MP3 module
SoftwareSerial mySerial(2, 3);
JQ6500_Serial mp3(mySerial);

bool obstacleDetected = false;
const uint8_t SensorCount = 3;
uint16_t sensorValues[SensorCount];
uint8_t CompteTour = 1;
uint8_t distanceObstacle = 15;

void Bras_Sup_On()  // Upper arm activation
{
  BrasSup.attach(8);
  // rotates the servo from 0 to 25 degrees by 5
  for (int angle = 0; angle <= 25; angle += 5) 
  {
    BrasSup.write(angle);
    delay(15);
  }
  delay(1000);
  BrasSup.detach();
}

void Bras_Sup_Off() // Upper arm desactivation
{
  BrasSup.attach(8);
  // rotates the servo from 25 to 0 degrees by 5
  for (int angle = 25; angle >= 0; angle -= 5) 
  {
    BrasSup.write(angle);
    delay(15);
  }
  delay(1000);
  BrasSup.detach();
}

void Bras_Main_On() // Main arm activation
{
  BrasMain.attach(13);
  // rotates the servo from 0 to 30 degrees by 5
  for (int angle = 0; angle <= 30; angle += 5) 
  {
    BrasMain.write(angle);
    delay(15);
  }
  delay(1000);
  BrasMain.detach();
}

void Bras_Main_Off()  // Main arm desactivation
{
  BrasMain.attach(13);
  // rotates the servo from 30 to 0 degrees by 5
  for (int angle = 30; angle >= 0; angle -= 5) 
  {
    BrasMain.write(angle);
    delay(15);
  }
  delay(1000);
  BrasMain.detach();
}

void Forward(int speed)  // Forward
{
  digitalWrite(MOTORB_L, LOW);
  digitalWrite(MOTORB_R, LOW);
  // Activation
  analogWrite(MOTORF_L, speed);
  analogWrite(MOTORF_R, speed);
}

void stop() // Stop
{
  analogWrite(MOTORB_L, 0);
  analogWrite(MOTORF_L, 0);
  analogWrite(MOTORB_R, 0);
  analogWrite(MOTORF_R, 0);
}

void Turn_left(int vitesse)  // Turn left
{
  digitalWrite(MOTORF_L, LOW);
  digitalWrite(MOTORB_R, LOW);
  // Activation
  analogWrite(MOTORF_R, vitesse);
  analogWrite(MOTORB_L, 95); 
}

void Turn_right(int vitesse)  // turn right
{
  digitalWrite(MOTORB_L, LOW);
  digitalWrite(MOTORF_R, LOW);
  // Activation
  analogWrite(MOTORB_R, 90); 
  analogWrite(MOTORF_L, vitesse);
}

void demiTour()  // Turn around
{
  digitalWrite(MOTORB_L, LOW);
  digitalWrite(MOTORF_R, LOW);
  // Activation
  analogWrite(MOTORB_R, 120);
  analogWrite(MOTORF_L, 110);
}

float getDistance1() // Obstacles sensors #1
{
  digitalWrite(TRIG_PIN1, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN1, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN1, LOW);
  
  return pulseIn(ECHO_PIN1, HIGH) * 0.0343 / 2;  // Convert time to distance (in cm)
}

float getDistance2() // Obstacles sensors #2
{
  digitalWrite(TRIG_PIN2, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN2, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN2, LOW);
  
  return pulseIn(ECHO_PIN2, HIGH) * 0.0343 / 2;  // Convert time to distance (in cm)
}

void setup() 
{
  Serial.begin(9600);
  // MP3 module initialization
  mySerial.begin(9600);
  mp3.setVolume(3);  // Set the volume
  mp3.reset();
  mp3.setLoopMode(MP3_LOOP_NONE);
  mp3.playFileByIndexNumber(2);
  // Obstacles sensors initialization
  pinMode(TRIG_PIN1, OUTPUT);
  pinMode(ECHO_PIN1, INPUT);
  pinMode(TRIG_PIN2, OUTPUT);
  pinMode(ECHO_PIN2, INPUT);
  // Motors initialization
  pinMode(MOTORF_L, OUTPUT);
  pinMode(MOTORB_L, OUTPUT);
  pinMode(MOTORF_R, OUTPUT);
  pinMode(MOTORB_R, OUTPUT);
  // Line sensors initialization
  qtr.setTypeAnalog();
  qtr.setSensorPins((const uint8_t[]){A0, A1, A2}, SensorCount);
  // A0 = left  // A1 = middle  // A2 = right
}

void loop() 
{
  qtr.read(sensorValues);

  // Obstacles sensors
  float distance1 = getDistance1();
  float distance2 = getDistance2();

  if ((distance1 <= distanceObstacle || distance2 <= distanceObstacle) && !obstacleDetected) 
  { 
    Serial.println("Obstacle détecté. Arrêt.");
    stop();  // Stop
    mp3.playFileByIndexNumber(3);  // Change index to play another sound
    obstacleDetected = true;       // Obstacle detected
  } 
  else if (distance1 > distanceObstacle && distance2 > distanceObstacle) 
  {
    obstacleDetected = false;      // Reset obstacle detection only when there is no obstacle
  }

  // If no obstacles detected
  if (!obstacleDetected) 
  {
    // All the sensors above white (turn around)
    if (sensorValues[0] <= 700 && sensorValues[1] <= 700 && sensorValues[2] <= 700) 
    {
      if (CompteTour == 1) 
      {
        stop();
        Bras_Sup_On();
        Bras_Main_On();
        mp3.playFileByIndexNumber(5);
        Bras_Main_Off();
        Bras_Sup_Off();
        while (!(sensorValues[0] >= 760 && sensorValues[1] <= 760 && sensorValues[2] >= 760)) 
        {
          Serial.println("DemiTour");
          demiTour();
          qtr.read(sensorValues);
          Serial.println("CompteTour a 1");
        }
        CompteTour = CompteTour + 1;
        Serial.println("CompteTour a 2");
      } 
      // If we already did a turn around during the session, the robot stop
      else if (CompteTour == 2) 
      {
        Serial.println("Parcours fini");
        stop();
      }
    } 
    // If middle sensor above white, go straight
    else if (sensorValues[1] <= 760) 
    {
      Forward(85);
      Serial.println("Avance");
    } 
    // If left sensor above white
    else if (sensorValues[0] <= 760) 
    {
      // Turn left until the middle sensor come back above the white line
      while (!(sensorValues[1] <= 760)) 
      {
        Serial.println("tourne à gauche");
        Turn_left(80);  // define the speed
        qtr.read(sensorValues);
      }
    } 
    // If right sensor above white
    else if (sensorValues[2] <= 760) 
    {
      // Turn right until the middle sensor come back above the white line
      while (!(sensorValues[1] <= 760)) 
      {
        Serial.println("tourne à droite");
        Turn_right(80); // define the speed
        qtr.read(sensorValues);
      }
    }
  }
}
